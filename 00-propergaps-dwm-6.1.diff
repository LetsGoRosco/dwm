diff --git a/config.def.h b/config.def.h
index 875885b..f0513e2 100644
--- a/config.def.h
+++ b/config.def.h
@@ -9,6 +9,7 @@ static const char selbordercolor[]  = "#005577";
 static const char selbgcolor[]      = "#005577";
 static const char selfgcolor[]      = "#eeeeee";
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int gappx 	= 8;  		/* gap pixel between windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const Bool showbar           = True;     /* False means no bar */
 static const Bool topbar            = True;     /* False means bottom bar */
diff --git a/dwm.c b/dwm.c
index f896170..47cf9c9 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1610,28 +1610,61 @@ tagmon(const Arg *arg) {
 
 void
 tile(Monitor *m) {
-	unsigned int i, n, h, mw, my, ty;
-	Client *c;
-
-	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
-	if(n == 0)
-		return;
-
-	if(n > m->nmaster)
-		mw = m->nmaster ? m->ww * m->mfact : 0;
-	else
-		mw = m->ww;
-	for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
-		if(i < m->nmaster) {
-			h = (m->wh - my) / (MIN(n, m->nmaster) - i);
-			resize(c, m->wx, m->wy + my, mw - (2*c->bw), h - (2*c->bw), False);
-			my += HEIGHT(c);
-		}
-		else {
-			h = (m->wh - ty) / (n - i);
-			resize(c, m->wx + mw, m->wy + ty, m->ww - mw - (2*c->bw), h - (2*c->bw), False);
-			ty += HEIGHT(c);
-		}
+  unsigned int i, n, h, r, g = 0, mw, my, ty;
+  Client *c;
+
+  for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+  if(n == 0)
+    return;
+
+  if(n > m->nmaster)
+    mw = m->nmaster ? (m->ww - (g = gappx)) * m->mfact : 0;
+  else
+    mw = m->ww;
+  for(i = my = ty = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++, r = 0) {
+    if(n == 1) {
+      if (c->bw) {
+        /* remove border when only one window is on the current tag */
+        c->oldbw = c->bw;
+        c->bw = 0;
+        r = 1;
+      }
+    }
+    else if(!c->bw && c->oldbw) {
+      /* restore border when more than one window is displayed */
+      c->bw = c->oldbw;
+      c->oldbw = 0;
+      r = 1;
+    }
+    if(i < m->nmaster) {
+      r = MIN(n, m->nmaster) - i;
+      h = (m->wh - my - gappx * (r - 1)) / r;
+      resize(c, m->wx + g,
+             m->wy + my + g,
+             mw - (2*c->bw) - g,
+             h - (2*c->bw) - 2*g, False);
+      if(r)
+        resizeclient(c, m->wx + g,
+                     m->wy + my + g,
+                     mw - (2*c->bw) - g,
+                     h - (2*c->bw) - 2*g);
+      my += HEIGHT(c) + gappx;
+    }
+    else {
+      r = n - i;
+      h = (m->wh - ty - gappx * (r - 1)) / r;
+      resize(c, m->wx + mw + g,
+             m->wy + ty + g,
+             m->ww - mw - 2*g - (2*c->bw),
+             h - 2*g - (2*c->bw), False);
+      if(r)
+        resizeclient(c, m->wx + mw + g,
+                     m->wy + ty + g,
+                     m->ww - mw - 2*g - (2*c->bw),
+                     h - 2*g - (2*c->bw));
+      ty += HEIGHT(c) + gappx;
+    }
+  }
 }
 
 void
